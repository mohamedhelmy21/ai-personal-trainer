{"ast":null,"code":"import axios from 'axios';\n\n// Import DailyPlan specifically for the transformation logic\n\n// Import the local JSON plan files\nimport weeklyMealPlanData from '../data/weekly_meal_plan.json';\nimport weeklyWorkoutPlanData from '../data/weekly_workout_plan.json';\n\n// Base API URL - Pointing to the local backend server\n// Ensure your backend FastAPI server is running on this address and port\nconst API_BASE_URL = 'http://localhost:8000'; // Default FastAPI port is 8000\n\n// API response type for chat from backend\n\n// API response type expected by the frontend chat component\n\n// Helper function to transform workout plan object to array\nconst transformWorkoutPlan = data => {\n  if (Array.isArray(data)) {\n    return data; // Already in correct format\n  }\n  if (typeof data === 'object' && data !== null) {\n    // Assuming keys are 'Day 1', 'Day 2', etc.\n    return Object.entries(data).map(([dayKey, dayData]) => ({\n      day: dayKey,\n      focus: dayData.type || 'Unknown',\n      exercises: dayData.workout || [],\n      // Ensure exercises match the Exercise interface structure if needed\n      // Add completed field if necessary\n      completed: false // Default to false\n    }));\n  }\n  console.warn('Unexpected workout plan data format:', data);\n  return [];\n};\n\n// Helper function to transform meal plan object to array (if needed)\nconst transformMealPlan = data => {\n  if (Array.isArray(data)) {\n    return data; // Already in correct format\n  }\n  if (typeof data === 'object' && data !== null && data.days && Array.isArray(data.days)) {\n    // If data is { days: [...] }\n    return data.days;\n  }\n  if (typeof data === 'object' && data !== null) {\n    // If data is { 'Day 1': {...}, ... }\n    // Map to DailyPlan structure\n    return Object.entries(data).map(([dayKey, dayData]) => ({\n      // Assuming dayData contains meals and totals\n      // Add a placeholder date or extract if available\n      date: dayData.date || new Date().toISOString().split('T')[0],\n      // Placeholder date\n      meals: dayData.meals || {\n        breakfast: null,\n        lunch: null,\n        dinner: null\n      },\n      // Ensure DailyMeals structure\n      totals: dayData.totals || {\n        protein_g: 0,\n        fat_g: 0,\n        carbs_g: 0,\n        calories: 0\n      } // Ensure MealTotals structure\n      // Add day property if needed by frontend components, though not in DailyPlan type\n      // day: dayKey, // This might be needed depending on how components use the data\n    })); // Cast the array of DailyPlan objects to WeeklyMealPlan\n  }\n  console.warn('Unexpected meal plan data format:', data);\n  return [];\n};\n\n// API service for interacting with the backend\nconst api = {\n  // User authentication (using mock for demo)\n  login: async (email, password) => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          age: 28,\n          gender: 'male',\n          height_cm: 175,\n          weight_kg: 75,\n          level: 'intermediate',\n          activity_level: 'moderately active',\n          available_equipment: ['barbell', 'dumbbell', 'bodyweight', 'machine'],\n          days_per_week: 4,\n          goal: 'muscle gain',\n          subgoal: 'hypertrophy',\n          meal_frequency: 3\n        });\n      }, 500);\n    });\n  },\n  // Update user profile (using mock for demo)\n  updateProfile: async profile => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(profile);\n      }, 500);\n    });\n  },\n  // Load meal plan from local JSON\n  loadMealPlan: async () => {\n    try {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const transformedPlan = transformMealPlan(weeklyMealPlanData);\n          resolve(transformedPlan);\n        }, 500);\n      });\n    } catch (error) {\n      console.error('Load meal plan error:', error);\n      return Promise.reject('Failed to load meal plan data.');\n    }\n  },\n  // Load workout plan from local JSON\n  loadWorkoutPlan: async () => {\n    try {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const transformedPlan = transformWorkoutPlan(weeklyWorkoutPlanData);\n          resolve(transformedPlan);\n        }, 500);\n      });\n    } catch (error) {\n      console.error('Load workout plan error:', error);\n      return Promise.reject('Failed to load workout plan data.');\n    }\n  },\n  // Chat with AI assistant (connecting to backend)\n  chat: async (sessionId, user, plan, message, planType, history) => {\n    try {\n      const planPayload = plan ? plan : null;\n      const response = await axios.post(`${API_BASE_URL}/chat`, {\n        session_id: sessionId,\n        user: user,\n        plan: planPayload,\n        message: message,\n        plan_type: planType,\n        history: history\n      });\n      return {\n        message: response.data.response,\n        history: response.data.history\n      };\n    } catch (error) {\n      console.error('Chat API error:', error);\n      let errorMessage = 'Sorry, I encountered an error trying to connect to the chat assistant.';\n      if (axios.isAxiosError(error) && error.response) {\n        errorMessage += ` Server responded with: ${error.response.status} - ${JSON.stringify(error.response.data)}`;\n      } else if (axios.isAxiosError(error) && error.request) {\n        errorMessage = 'Unable to reach the chat assistant. Please ensure the backend server is running and accessible at ' + API_BASE_URL;\n      }\n      return {\n        message: errorMessage,\n        history: [...history, {\n          role: 'user',\n          content: message\n        }, {\n          role: 'assistant',\n          content: errorMessage\n        }]\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","weeklyMealPlanData","weeklyWorkoutPlanData","API_BASE_URL","transformWorkoutPlan","data","Array","isArray","Object","entries","map","dayKey","dayData","day","focus","type","exercises","workout","completed","console","warn","transformMealPlan","days","date","Date","toISOString","split","meals","breakfast","lunch","dinner","totals","protein_g","fat_g","carbs_g","calories","api","login","email","password","Promise","resolve","setTimeout","age","gender","height_cm","weight_kg","level","activity_level","available_equipment","days_per_week","goal","subgoal","meal_frequency","updateProfile","profile","loadMealPlan","transformedPlan","error","reject","loadWorkoutPlan","chat","sessionId","user","plan","message","planType","history","planPayload","response","post","session_id","plan_type","errorMessage","isAxiosError","status","JSON","stringify","request","role","content"],"sources":["E:/ai-personal-trainer/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { UserProfile } from '../types/user';\n// Import DailyPlan specifically for the transformation logic\nimport { DailyPlan, WeeklyMealPlan } from '../types/meal'; \nimport { WorkoutDay, WeeklyWorkoutPlan } from '../types/workout';\nimport { ChatMessage } from '../types/chat';\n\n// Import the local JSON plan files\nimport weeklyMealPlanData from '../data/weekly_meal_plan.json';\nimport weeklyWorkoutPlanData from '../data/weekly_workout_plan.json';\n\n// Base API URL - Pointing to the local backend server\n// Ensure your backend FastAPI server is running on this address and port\nconst API_BASE_URL = 'http://localhost:8000'; // Default FastAPI port is 8000\n\n// API response type for chat from backend\ninterface BackendChatResponse {\n  response: string; // The chatbot's reply message\n  plan: any; // The potentially updated plan (meal or workout)\n  history: ChatMessage[]; // The updated conversation history\n}\n\n// API response type expected by the frontend chat component\ninterface FrontendChatResponse {\n  message: string;\n  history: ChatMessage[];\n}\n\n// Helper function to transform workout plan object to array\nconst transformWorkoutPlan = (data: any): WeeklyWorkoutPlan => {\n  if (Array.isArray(data)) {\n    return data as WeeklyWorkoutPlan; // Already in correct format\n  }\n  if (typeof data === 'object' && data !== null) {\n    // Assuming keys are 'Day 1', 'Day 2', etc.\n    return Object.entries(data).map(([dayKey, dayData]: [string, any]) => ({\n      day: dayKey, \n      focus: dayData.type || 'Unknown', \n      exercises: dayData.workout || [], \n      // Ensure exercises match the Exercise interface structure if needed\n      // Add completed field if necessary\n      completed: false, // Default to false\n    })) as WeeklyWorkoutPlan;\n  }\n  console.warn('Unexpected workout plan data format:', data);\n  return []; \n};\n\n// Helper function to transform meal plan object to array (if needed)\nconst transformMealPlan = (data: any): WeeklyMealPlan => {\n  if (Array.isArray(data)) {\n    return data as WeeklyMealPlan; // Already in correct format\n  }\n  if (typeof data === 'object' && data !== null && data.days && Array.isArray(data.days)) {\n     // If data is { days: [...] }\n     return data.days as WeeklyMealPlan;\n  }\n  if (typeof data === 'object' && data !== null) {\n    // If data is { 'Day 1': {...}, ... }\n    // Map to DailyPlan structure\n    return Object.entries(data).map(([dayKey, dayData]: [string, any]): DailyPlan => ({\n      // Assuming dayData contains meals and totals\n      // Add a placeholder date or extract if available\n      date: dayData.date || new Date().toISOString().split('T')[0], // Placeholder date\n      meals: dayData.meals || { breakfast: null, lunch: null, dinner: null }, // Ensure DailyMeals structure\n      totals: dayData.totals || { protein_g: 0, fat_g: 0, carbs_g: 0, calories: 0 }, // Ensure MealTotals structure\n      // Add day property if needed by frontend components, though not in DailyPlan type\n      // day: dayKey, // This might be needed depending on how components use the data\n    })) as WeeklyMealPlan; // Cast the array of DailyPlan objects to WeeklyMealPlan\n  }\n  console.warn('Unexpected meal plan data format:', data);\n  return [];\n};\n\n\n// API service for interacting with the backend\nconst api = {\n  // User authentication (using mock for demo)\n  login: async (email: string, password: string): Promise<UserProfile> => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          age: 28,\n          gender: 'male',\n          height_cm: 175,\n          weight_kg: 75,\n          level: 'intermediate',\n          activity_level: 'moderately active',\n          available_equipment: ['barbell', 'dumbbell', 'bodyweight', 'machine'],\n          days_per_week: 4,\n          goal: 'muscle gain',\n          subgoal: 'hypertrophy',\n          meal_frequency: 3,\n        });\n      }, 500);\n    });\n  },\n\n  // Update user profile (using mock for demo)\n  updateProfile: async (profile: UserProfile): Promise<UserProfile> => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(profile);\n      }, 500);\n    });\n  },\n\n  // Load meal plan from local JSON\n  loadMealPlan: async (): Promise<WeeklyMealPlan> => {\n    try {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          const transformedPlan = transformMealPlan(weeklyMealPlanData);\n          resolve(transformedPlan);\n        }, 500);\n      });\n    } catch (error) {\n      console.error('Load meal plan error:', error);\n      return Promise.reject('Failed to load meal plan data.');\n    }\n  },\n\n  // Load workout plan from local JSON\n  loadWorkoutPlan: async (): Promise<WeeklyWorkoutPlan> => {\n    try {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          const transformedPlan = transformWorkoutPlan(weeklyWorkoutPlanData);\n          resolve(transformedPlan);\n        }, 500);\n      });\n    } catch (error) {\n      console.error('Load workout plan error:', error);\n      return Promise.reject('Failed to load workout plan data.');\n    }\n  },\n\n  // Chat with AI assistant (connecting to backend)\n  chat: async (\n    sessionId: string,\n    user: UserProfile,\n    plan: WeeklyMealPlan | WeeklyWorkoutPlan | null, \n    message: string,\n    planType: 'meal' | 'workout',\n    history: ChatMessage[]\n  ): Promise<FrontendChatResponse> => {\n    try {\n      const planPayload = plan ? plan : null;\n\n      const response = await axios.post<BackendChatResponse>(`${API_BASE_URL}/chat`, {\n        session_id: sessionId,\n        user: user,\n        plan: planPayload, \n        message: message,\n        plan_type: planType,\n        history: history\n      });\n\n      return {\n        message: response.data.response,\n        history: response.data.history\n      };\n    } catch (error) {\n      console.error('Chat API error:', error);\n      let errorMessage = 'Sorry, I encountered an error trying to connect to the chat assistant.';\n      if (axios.isAxiosError(error) && error.response) {\n        errorMessage += ` Server responded with: ${error.response.status} - ${JSON.stringify(error.response.data)}`;\n      } else if (axios.isAxiosError(error) && error.request) {\n        errorMessage = 'Unable to reach the chat assistant. Please ensure the backend server is running and accessible at ' + API_BASE_URL;\n      }\n      return {\n        message: errorMessage,\n        history: [...history, { role: 'user', content: message }, { role: 'assistant', content: errorMessage }]\n      };\n    }\n  }\n};\n\nexport default api;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}