{"ast":null,"code":"var _jsxFileName = \"E:\\\\ai-personal-trainer\\\\frontend\\\\src\\\\context\\\\UserContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Default user profile for demo purposes\nconst defaultUser = null; // Changed to null to force profile setup\n\nconst UserContext = /*#__PURE__*/createContext(undefined);\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(defaultUser);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Determine if profile is complete based on user object existence\n  const isProfileComplete = user !== null;\n\n  // Mock login function for demo\n  const login = async (email, password) => {\n    // Simulate API call\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // Only set authenticated, but don't set user profile\n        // This will force the user to complete profile setup\n        setIsAuthenticated(true);\n        resolve(true);\n      }, 1000);\n    });\n  };\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser,\n      isAuthenticated,\n      isProfileComplete,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"sC7xwQ2yD5wyUrbO+fHlMG+ux0U=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n_s2(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","defaultUser","UserContext","undefined","UserProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isProfileComplete","login","email","password","Promise","resolve","setTimeout","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","context","Error","$RefreshReg$"],"sources":["E:/ai-personal-trainer/frontend/src/context/UserContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { UserProfile } from '../types/user';\n\n// Default user profile for demo purposes\nconst defaultUser: UserProfile | null = null; // Changed to null to force profile setup\n\ninterface UserContextType {\n  user: UserProfile | null;\n  setUser: (user: UserProfile) => void;\n  isAuthenticated: boolean;\n  isProfileComplete: boolean; // Added to track profile completion status\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport const UserProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(defaultUser);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  \n  // Determine if profile is complete based on user object existence\n  const isProfileComplete = user !== null;\n\n  // Mock login function for demo\n  const login = async (email: string, password: string): Promise<boolean> => {\n    // Simulate API call\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        // Only set authenticated, but don't set user profile\n        // This will force the user to complete profile setup\n        setIsAuthenticated(true);\n        resolve(true);\n      }, 1000);\n    });\n  };\n\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  return (\n    <UserContext.Provider value={{ \n      user, \n      setUser, \n      isAuthenticated, \n      isProfileComplete,\n      login, \n      logout \n    }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = (): UserContextType => {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9E;AACA,MAAMC,WAA+B,GAAG,IAAI,CAAC,CAAC;;AAW9C,MAAMC,WAAW,gBAAGN,aAAa,CAA8BO,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/E,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAqBG,WAAW,CAAC;EACjE,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACA,MAAMa,iBAAiB,GAAGJ,IAAI,KAAK,IAAI;;EAEvC;EACA,MAAMK,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAuB;IACzE;IACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACf;QACA;QACAP,kBAAkB,CAAC,IAAI,CAAC;QACxBM,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBV,OAAO,CAAC,IAAI,CAAC;IACbE,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,oBACEV,OAAA,CAACE,WAAW,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAC3Bb,IAAI;MACJC,OAAO;MACPC,eAAe;MACfE,iBAAiB;MACjBC,KAAK;MACLM;IACF,CAAE;IAAAb,QAAA,EACCA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClB,EAAA,CArCWF,YAA+C;AAAAqB,EAAA,GAA/CrB,YAA+C;AAuC5D,OAAO,MAAMsB,OAAO,GAAGA,CAAA,KAAuB;EAAAC,GAAA;EAC5C,MAAMC,OAAO,GAAG/B,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI0B,OAAO,KAAKzB,SAAS,EAAE;IACzB,MAAM,IAAI0B,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}